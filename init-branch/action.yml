name: "Olivaw branch initialisation"
author: "Wimmics"
description: "Launches Olivaw model test"
inputs:
  repository:
    description: "The url of the repository to test"
    type: string
    required: true
  ref:
    description: "The ref of the repository to test"
    type: string
    required: true
  gist-secret:
    description: "The personal access token with only gist scope allowed"
    type: string
    required: true
  server-url:
    description: "The platform URL"
    type: string
    required: false
    default: "https://github.com"

runs:
  using: "composite"
  steps:
    - name: Parsing repo ref data
      shell: bash
      run: |
        REF=${{ inputs.ref }}
        echo "github.ref: $REF"
        IFS='/' read -ra PATHS <<< "$REF"

        REF_TYPE="${PATHS[1]}"
        echo $REF_TYPE
        echo "REF_TYPE=$(echo ${REF_TYPE})" >> $GITHUB_ENV

        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        echo $BRANCH_NAME
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV

        echo "DEFAULT_BRANCH=$(echo ${{ github.event.repository.default_branch }})"

    - uses: actions/setup-python@v5 
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}

      with:
        python-version: 'pypy3.10'
    - uses: actions/checkout@v4
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
    - name: Update README.md
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      shell: bash
      run: |
        pip install git+https://github.com/Wimmics/olivaw@v0.0.5

        BADGES="$(olivaw show badges --MODE=ACTIONS --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --BRANCH=${{ inputs.ref }})"
        BADGES_DATA=($BADGES)

        echo "MODEL_PASS_COLOR=${BADGES_DATA[2]}" >> $GITHUB_ENV
        echo "MODEL_PASS_LABEL=${BADGES_DATA[5]}" >> $GITHUB_ENV
        echo "MODEL_NOTTESTED_COLOR=${BADGES_DATA[8]}" >> $GITHUB_ENV
        echo "MODEL_NOTTESTED_LABEL=${BADGES_DATA[11]}" >> $GITHUB_ENV
        echo "MODEL_CANNOTTELL_COLOR=${BADGES_DATA[14]}" >> $GITHUB_ENV
        echo "MODEL_CANNOTTELL_LABEL=${BADGES_DATA[17]}" >> $GITHUB_ENV
        echo "MODEL_MINORFAIL_COLOR=${BADGES_DATA[20]}" >> $GITHUB_ENV
        echo "MODEL_MINORFAIL_LABEL=${BADGES_DATA[23]}" >> $GITHUB_ENV
        echo "MODEL_MAJORFAIL_COLOR=${BADGES_DATA[26]}" >> $GITHUB_ENV
        echo "MODEL_MAJORFAIL_LABEL=${BADGES_DATA[29]}" >> $GITHUB_ENV
        echo "DATA_PASS_COLOR=${BADGES_DATA[32]}" >> $GITHUB_ENV
        echo "DATA_PASS_LABEL=${BADGES_DATA[35]}" >> $GITHUB_ENV
        echo "DATA_NOTTESTED_COLOR=${BADGES_DATA[38]}" >> $GITHUB_ENV
        echo "DATA_NOTTESTED_LABEL=${BADGES_DATA[41]}" >> $GITHUB_ENV
        echo "DATA_CANNOTTELL_COLOR=${BADGES_DATA[44]}" >> $GITHUB_ENV
        echo "DATA_CANNOTTELL_LABEL=${BADGES_DATA[47]}" >> $GITHUB_ENV
        echo "DATA_MINORFAIL_COLOR=${BADGES_DATA[50]}" >> $GITHUB_ENV
        echo "DATA_MINORFAIL_LABEL=${BADGES_DATA[53]}" >> $GITHUB_ENV
        echo "DATA_MAJORFAIL_COLOR=${BADGES_DATA[56]}" >> $GITHUB_ENV
        echo "DATA_MAJORFAIL_LABEL=${BADGES_DATA[59]}" >> $GITHUB_ENV
        echo "QUERY_PASS_COLOR=${BADGES_DATA[62]}" >> $GITHUB_ENV
        echo "QUERY_PASS_LABEL=${BADGES_DATA[65]}" >> $GITHUB_ENV
        echo "QUERY_NOTTESTED_COLOR=${BADGES_DATA[68]}" >> $GITHUB_ENV
        echo "QUERY_NOTTESTED_LABEL=${BADGES_DATA[71]}" >> $GITHUB_ENV
        echo "QUERY_CANNOTTELL_COLOR=${BADGES_DATA[74]}" >> $GITHUB_ENV
        echo "QUERY_CANNOTTELL_LABEL=${BADGES_DATA[77]}" >> $GITHUB_ENV
        echo "QUERY_MINORFAIL_COLOR=${BADGES_DATA[80]}" >> $GITHUB_ENV
        echo "QUERY_MINORFAIL_LABEL=${BADGES_DATA[83]}" >> $GITHUB_ENV
        echo "QUERY_MAJORFAIL_COLOR=${BADGES_DATA[86]}" >> $GITHUB_ENV
        echo "QUERY_MAJORFAIL_LABEL=${BADGES_DATA[89]}" >> $GITHUB_ENV
        echo "EL_COLOR=${BADGES_DATA[92]}" >> $GITHUB_ENV
        echo "EL_LABEL=${BADGES_DATA[95]}" >> $GITHUB_ENV
        echo "RL_COLOR=${BADGES_DATA[98]}" >> $GITHUB_ENV
        echo "RL_LABEL=${BADGES_DATA[101]}" >> $GITHUB_ENV

        echo "GISTID=$(olivaw show gist --MODE=ACTIONS --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --BRANCH=${{ inputs.ref }})" >> $GITHUB_ENV

        olivaw init branch --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --REF=${{ inputs.ref }}

    - name: Commit README.md
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      shell: bash
      run: |
        git config --global user.email "no-reply@github.com"
        git config --global user.name "Olivaw in Actions"
        git add README.md
        git commit -m "Initialize README.md for branch ${{ env.BRANCH }} [skip actions]"
        git remote set-url origin ${{ inputs.server-url }}/${{ inputs.repository }}
        git push
    - name: Create the MODEL_PASS Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_PASS.json
        label: Pass
        message: ${{ env.MODEL_PASS_LABEL }}
        color: ${{ env.MODEL_PASS_COLOR }}
    - name: Create the MODEL_NOTTESTED Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_NOTTESTED.json
        label: NotTested
        message: ${{ env.MODEL_NOTTESTED_LABEL }}
        color: ${{ env.MODEL_NOTTESTED_COLOR }}
    - name: Create the MODEL_CANNOTTELL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.MODEL_CANNOTTELL_LABEL }}
        color: ${{ env.MODEL_CANNOTTELL_COLOR }}
    - name: Create the MODEL_MINORFAIL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_MINORFAIL.json
        label: MinorFail
        message: ${{ env.MODEL_MINORFAIL_LABEL }}
        color: ${{ env.MODEL_MINORFAIL_COLOR }}
    - name: Create the MODEL_MAJORFAIL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_MAJORFAIL.json
        label: MinorFail
        message: ${{ env.MODEL_MAJORFAIL_LABEL }}
        color: ${{ env.MODEL_MAJORFAIL_COLOR }}
    - name: Create the DATA_PASS Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_PASS.json
        label: Pass
        message: ${{ env.DATA_PASS_LABEL }}
        color: ${{ env.DATA_PASS_COLOR }}
    - name: Create the DATA_NOTTESTED Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_NOTTESTED.json
        label: NotTested
        message: ${{ env.DATA_NOTTESTED_LABEL }}
        color: ${{ env.DATA_NOTTESTED_COLOR }}
    - name: Create the DATA_CANNOTTELL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.DATA_CANNOTTELL_LABEL }}
        color: ${{ env.DATA_CANNOTTELL_COLOR }}
    - name: Create the DATA_MINORFAIL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_MINORFAIL.json
        label: MinorFail
        message: ${{ env.DATA_MINORFAIL_LABEL }}
        color: ${{ env.DATA_MINORFAIL_COLOR }}
    - name: Create the DATA_MAJORFAIL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_MAJORFAIL.json
        label: MinorFail
        message: ${{ env.DATA_MAJORFAIL_LABEL }}
        color: ${{ env.DATA_MAJORFAIL_COLOR }}
    - name: Create the QUERY_PASS Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_PASS.json
        label: Pass
        message: ${{ env.QUERY_PASS_LABEL }}
        color: ${{ env.QUERY_PASS_COLOR }}
    - name: Create the QUERY_NOTTESTED Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_NOTTESTED.json
        label: NotTested
        message: ${{ env.QUERY_NOTTESTED_LABEL }}
        color: ${{ env.QUERY_NOTTESTED_COLOR }}
    - name: Create the QUERY_CANNOTTELL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.QUERY_CANNOTTELL_LABEL }}
        color: ${{ env.QUERY_CANNOTTELL_COLOR }}
    - name: Create the QUERY_MINORFAIL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_MINORFAIL.json
        label: MinorFail
        message: ${{ env.QUERY_MINORFAIL_LABEL }}
        color: ${{ env.QUERY_MINORFAIL_COLOR }}
    - name: Create the QUERY_MAJORFAIL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_MAJORFAIL.json
        label: MinorFail
        message: ${{ env.QUERY_MAJORFAIL_LABEL }}
        color: ${{ env.QUERY_MAJORFAIL_COLOR }}
    - name: Create the EL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_EL.json
        label: OWL EL
        message: ${{ env.EL_LABEL }}
        color: ${{ env.EL_COLOR }}
    - name: Create the RL Badge
      if: ${{ (env.REF_TYPE != 'tags') && (github.event.repository.default_branch != BRANCH) }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_RL.json
        label: OWL QL
        message: ${{ env.RL_LABEL }}
        color: ${{ env.RL_COLOR }}