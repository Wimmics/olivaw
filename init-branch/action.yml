name: "Olivaw branch initialisation"
author: "Wimmics"
description: "Launches Olivaw model test"
inputs:
  gist-secret:
    description: "The personal access token with only gist scope allowed"
    type: string
    required: true

runs:
  using: "composite"
  steps:

    - name: Parsing repo ref data
      id: repo-ref
      shell: bash
      run: |
        SERVER_URL=${{ github.server_url }}
        REPO=${{ github.repository }}
        REPO_URI="$SERVER_URL/$REPO"
        echo "REPO_URI=$(echo $REPO_URI)" >> $GITHUB_ENV
        echo "Repository URI: $REPO_URI"

        REF=${{ github.ref }}
        echo "Repository ref: $REF"
        IFS='/' read -ra PATHS <<< "$REF"

        REF_TYPE="${PATHS[1]}"
        echo "REF_TYPE=$(echo ${REF_TYPE})" >> $GITHUB_ENV

        REF_NAME="${PATHS[1]}_${PATHS[2]}"
        BRANCH=$(echo ${PATHS[2]})
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "REF_NAME=$REF_NAME" >> $GITHUB_ENV

        echo "Branch: $BRANCH"
        echo "Ref name: $REF_NAME"
        echo "Ref type: $REF_TYPE"

    - name: Compute if actions should be skipped because of tag
      id: tag-skip
      shell: bash
      run: |
        TAG_SKIP=${{ (env.REF_TYPE == 'tags') || (github.event.repository.default_branch == env.BRANCH)}}
        echo "TAG_SKIP=" >> $GITHUB_ENV
        echo "Is trigger event a tag: $TAG_SKIP"

    - name: Checkout repository
      id: repo-checkout
      if: ${{ env.TAG_SKIP != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}

    - name: Compute if actions should be skipped because of uninitialized repository
      id: init-skip
      shell: bash
      run: |
        UNINITIALIZED=${{ hashFiles('.acimov/parameters.json') == '' }}
        echo "UNINITIALIZED=$(echo $UNINITIALIZED)" >> $GITHUB_ENV
        echo "Is repository uninitialized: $UNINITIALIZED"

    - name: Compute if actions should be skipped because of one of the previous issues
      id: init-tag-skip
      shell: bash
      run: |
        INIT_TAG_SKIP=${{ (env.TAG_SKIP == 'true') || (env.UNINITIALIZED == 'true') }} 
        echo "INIT_TAG_SKIP=$INIT_TAG_SKIP" >> $GITHUB_ENV
        echo "Is event a tag or repo not initialized: $INIT_TAG_SKIP"

    - name: Install python
      id: setup-python
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      uses: actions/setup-python@v5 
      with:
        python-version: 'pypy3.10'

    - name: Get olivaw actions version
      id: olivaw-version
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      shell: bash
      run: |
        ACTIONS_PATH=${{ github.action_path }}
        IFS='/' read -ra ACTIONS_PATH_PARTS <<< "$ACTIONS_PATH"
        OLIVAW_VERSION="${ACTIONS_PATH_PARTS[7]}"
        echo "OLIVAW_VERSION=$(echo $OLIVAW_VERSION)" >> $GITHUB_ENV
        echo "Olivaw version: $OLIVAW_VERSION"

    - name: Compute olivaw command line parameters
      id: olivaw-parameters
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      shell: bash
      run: |
        OLIVAW_PARAMETERS="--MODE=ACTIONS --REF=${{ github.ref }}"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --DEV_USERNAME=${{ github.actor }}"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --REPO_URI=${{ env.REPO_URI }}"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --BRANCH=${{ env.BRANCH }}"
        echo "OLIVAW_PARAMETERS=$(echo $OLIVAW_PARAMETERS)" >> $GITHUB_ENV
        echo "Olivaw parameters: $OLIVAW_PARAMETERS"

    - name: Prepare virtual environment if no cache hit
      id: init-venv
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      shell: bash
      run: |
        python -m venv ./.venv
        source ./.venv/bin/activate
        pip install -q --upgrade pip
        pip install -q git+https://github.com/Wimmics/olivaw.git@${{ env.OLIVAW_VERSION }}

    - name: Retrieve Gist Id and badges values, then update README
      id: gist-id
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      shell: bash
      run: |
        source ./.venv/bin/activate

        GIST_ID=$(olivaw show gist ${{ env.OLIVAW_PARAMETERS }})
        echo "GIST_ID=$GIST_ID" >> $GITHUB_ENV
        echo "Git id: $GIST_ID"

        BADGES_FILES="$(olivaw show badges ${{ env.OLIVAW_PARAMETERS }})"
        echo "BADGES_FILES=$BADGES_FILES" >> $GITHUB_ENV
        echo "Badges files: $BADGES_FILES"

        olivaw init branch ${{ env.OLIVAW_PARAMETERS }}

    - name: Preparing Gist API Call
      id: gist-payload
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      shell: bash
      run: |
        GIST_PAYLOAD='{"gist_id": "${{ env.GIST_ID }}", "description": "Olivaw badges for ${{ github.repository }}", "files": ${{ env.BADGES_FILES }}}'
        echo "GIST_PAYLOAD=$GIST_PAYLOAD" >> $GITHUB_ENV
        echo "Gist payload: $GIST_PAYLOAD"

    - name: Upload Badges
      id: gist-upload
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      continue-on-error: true
      shell: bash
      run: |
        echo "Uploading ${{ github.repository }} badges values for branch ${{ env.BRANCH }} on gist ${{ env.GIST_ID }}"

        curl --request POST \
          --url 'https://api.github.com/gists/${{ env.GIST_ID }}?scope=gist' \
          --header 'Authorization: token ${{ inputs.gist-secret }}' \
          --header 'Content-Type: application/json' \
          --header 'X-GitHub-Api-Version: 2022-11-28' \
          --header 'User-Agent: olivaw/${{ env.OLIVAW_VERSION }}' \
          --data '${{ env.GIST_PAYLOAD }}'

    - name: Commit README.md
      id: commit-repo
      if: ${{ env.INIT_TAG_SKIP != 'true' }}
      shell: bash
      run: |
        git config --global user.email "no-reply@github.com"
        git config --global user.name "Olivaw in Actions"
        git add README.md
        git commit -m "Initialize README.md for branch ${{ env.REF_NAME }} [skip actions]"
        git remote set-url origin ${{ env.REPO_URI }}
        git push