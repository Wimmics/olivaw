name: "Olivaw tests"
author: "Wimmics"
description: "Launches Olivaw test suite"
branding:
  icon: 'check-circle'
  color: 'blue'
inputs:
  gist-secret:
    description: "The personal access token with only gist scope allowed"
    type: string
    required: false
    default: ""
  model-test:
    description: "Should the model tests be run"
    type: boolean
    required: false
    default: true
  data-test:
    description: "Should the data tests be run"
    type: boolean
    required: false
    default: true
  query-test:
    description: "Should the query tests be run"
    type: boolean
    required: false
    default: true
  commit-report:
    description: "Should the report be committed on the repository"
    type: boolean
    required: false
    default: true
  archive-report:
    description: "Should the report be archived as a Github Artifact"
    type: boolean
    required: false
    default: true

runs:
  using: "composite"
  steps:
    - name: Install python environment
      id: setup-python
      uses: actions/setup-python@v5 
      with:
        python-version: 'pypy3.10'

    - name: Get repository
      id: checkout-repo
      uses: actions/checkout@v4
      with:
        github-server-url: ${{ github.server_url }}
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}

    - name: Check if repository is initialized
      id: check-init
      shell: bash
      run: |
        INITIALIZED=${{ hashFiles('.acimov/parameters.json') != '' }}
        echo "INITIALIZED=$(echo $INITIALIZED)" >> $GITHUB_ENV
        echo "Is repository initialized: $INITIALIZED"

    - name: Compute which actions steps to perform
      id: plan-actions
      shell: bash
      run: |
        RUN_MODEL_TESTS=${{ (inputs.model-test == 'true') && (env.INITIALIZED == 'true') }}
        echo "RUN_MODEL_TESTS=$(echo $RUN_MODEL_TESTS)" >> $GITHUB_ENV
        echo "Run model tests: $RUN_MODEL_TESTS"

        RUN_DATA_TESTS=${{ (inputs.data-test == 'true') && (env.INITIALIZED == 'true') }}
        echo "RUN_DATA_TESTS=$(echo $RUN_DATA_TESTS)" >> $GITHUB_ENV
        echo "Run data tests: $RUN_DATA_TESTS"

        RUN_QUERY_TESTS=${{ (inputs.query-test == 'true') && (env.INITIALIZED == 'true') }}
        echo "RUN_QUERY_TESTS=$(echo $RUN_QUERY_TESTS)" >> $GITHUB_ENV
        echo "Run query tests: $RUN_QUERY_TESTS"

    - name: Check if any test shoudld be launched
      id: any-test
      shell: bash
      run: |
        RUN_ANY_TESTS=${{ (env.RUN_MODEL_TESTS == 'true') || (env.RUN_DATA_TESTS == 'true') || (env.RUN_QUERY_TESTS == 'true') }}
        echo "RUN_ANY_TESTS=$(echo $RUN_ANY_TESTS)" >> $GITHUB_ENV
        echo "Run any tests: $RUN_ANY_TESTS"

    - name: Check if any report should be commited
      id: should-commit
      shell: bash
      run: |
        COMMIT_REPORTS=${{ (env.RUN_ANY_TESTS == 'true') && (inputs.commit-report == 'true') }}
        echo "COMMIT_REPORTS=$(echo $COMMIT_REPORTS)" >> $GITHUB_ENV 
        echo "Should commit reports: $COMMIT_REPORTS"

    - name: Get olivaw actions version
      id: actions-version
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: |
        ACTIONS_PATH=${{ github. action_path }}
        IFS='/' read -ra ACTIONS_PATH_PARTS <<< "$ACTIONS_PATH"
        OLIVAW_VERSION="${ACTIONS_PATH_PARTS[7]}"
        echo "OLIVAW_VERSION=$(echo $OLIVAW_VERSION)" >> $GITHUB_ENV
        echo "Olivaw version: $OLIVAW_VERSION"

    - name: Compute virtual environment cache key
      id: cache-key
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: |
        CACHE_KEY="${{ runner.os }}-${{ steps.setup-python.outputs.python-path }}-${{ env.OLIVAW_VERSION }}"
        echo "CACHE_KEY=$(echo $CACHE_KEY)" >> $GITHUB_ENV
        echo "Cache key: $CACHE_KEY"

    - name: Try to retrieve virtual environment
      id: cache-restore
      if: ${{ env.INITIALIZED == 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: .venv
        key: ${{ env.CACHE_KEY }}

    - name: Plan if some installation is required in the virtual environment
      id: plan-venv
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: |
        MAKE_VENV=${{ (env.INITIALIZED == 'true') && (steps.cache-restore.outputs.cache-hit != 'true') }}
        echo "MAKE_VENV=$(echo $MAKE_VENV)" >> $GITHUB_ENV
        echo "Prepare virtual environment: $MAKE_VENV"

    - name: Prepare virtual environment if no cache hit
      id: init-venv
      if: ${{ env.MAKE_VENV == 'true' }}
      shell: bash
      run: |
        python -m venv ./.venv
        source ./.venv/bin/activate
        pip install -q --upgrade pip
        pip install -q git+https://github.com/Wimmics/olivaw.git@${{ env.OLIVAW_VERSION }}

    - name: Save virtual environment if no chache hit
      id: cache-save
      if: ${{ env.MAKE_VENV == 'true' }}
      uses: actions/cache/save@v4
      with:
        path: .venv
        key: ${{ env.CACHE_KEY }}

    - name: Compute olivaw command line parameters
      id: olivaw-parameters
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: |
        OLIVAW_PARAMETERS="--MODE=ACTIONS --REPO-ROOT=. --REF=${{ github.ref }} --GIST_TOKEN=${{ inputs.gist-secret }}"

        DEV_USERNAME=${{ github.actor }}
        echo "DEV_USERNAME=$(echo $DEV_USERNAME)" >> $GITHUB_ENV
        echo "Dev username: $DEV_USERNAME"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --DEV_USERNAME=$DEV_USERNAME"

        SERVER_URL=${{ github.server_url }}
        REPO=${{ github.repository }}
        REPO_URI="$SERVER_URL/$REPO"
        echo "REPO_URI=$(echo $REPO_URI)" >> $GITHUB_ENV
        echo "Repository URI: $REPO_URI"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --REPO_URI=$REPO_URI"

        IFS='/' read -ra REF_PARTS <<< "${{ github.ref }}"
        BRANCH="${REF_PARTS[2]}"
        echo "BRANCH=$(echo $BRANCH)" >> $GITHUB_ENV
        echo "Repository branch: $BRANCH"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --BRANCH=$BRANCH"

        COMMIT_HASH=${{ github.sha }}
        echo "COMMIT_HASH=$(echo $COMMIT_HASH)" >> $GITHUB_ENV
        echo "Commit hash: $COMMIT_HASH"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --COMMIT_HASH=$COMMIT_HASH"

        IFS='+' read -ra DATE_PARTS <<< "${{ github.event.head_commit.timestamp }}"
        COMMIT_DATE=${DATE_PARTS[0]}
        echo "COMMIT_DATE=$(echo $COMMIT_DATE)" >> $GITHUB_ENV
        echo "Commit date: $COMMIT_DATE"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --COMMIT_DATE=$COMMIT_DATE"

        REPO_STATE="$(git ls-files -m -d -s . | git hash-object --stdin)"
        echo "REPO_STATE=$(echo $REPO_STATE)" >> $GITHUB_ENV
        echo "Repository state: $REPO_STATE"
        OLIVAW_PARAMETERS="$OLIVAW_PARAMETERS --REPO_STATE=$REPO_STATE"

        echo "OLIVAW_PARAMETERS=$(echo $OLIVAW_PARAMETERS)" >> $GITHUB_ENV
        echo "Olivaw Actions parameters: $OLIVAW_PARAMETERS"

    - name: Generate test reports
      id: run-test
      if: ${{ env.RUN_ANY_TESTS == 'true' }}
      shell: bash
      run: |
        source ./.venv/bin/activate

        GIST_ID="$(olivaw show gist ${{ env.OLIVAW_PARAMETERS }})"
        echo "GIST_ID=$(echo $GIST_ID)" >> $GITHUB_ENV
        echo "Gist ID: $GIST_ID"

        BADGES_PAYLOAD='{"gist_id": "$GIST_ID", "description": "Olivaw badges for ${{ github.repository }}", "files": {'

        if ${{ env.RUN_MODEL_TESTS == 'true' }}
        then
          echo "Model tests ongoing..."
          BADGES_PAYLOAD="$BADGES_PAYLOAD$(olivaw test model ${{ env.OLIVAW_PARAMETERS }})"
          git add .acimov/output/model-test-actions.ttl .acimov/output/model-test-actions.md -f
        fi

        if ${{ env.RUN_DATA_TESTS == 'true' }}
        then
          echo "Data tests ongoing..."

          SEPARATOR=""
          if ${{ env.RUN_MODEL_TESTS == 'true' }}
          then
            SEPARATOR=", "
          fi

          BADGES_PAYLOAD="$BADGES_PAYLOAD$SEPARATOR$(olivaw test data ${{ env.OLIVAW_PARAMETERS }})"
          git add .acimov/output/data-test-actions.ttl .acimov/output/data-test-actions.md -f
        fi

        if ${{ env.RUN_QUERY_TESTS == 'true' }}
        then
          echo "Query tests ongoing..."

          SEPARATOR=""
          if ${{ (env.RUN_MODEL_TESTS == 'true') || (env.RUN_DATA_TESTS == 'true') }}
          then
            SEPARATOR=", "
          fi

          BADGES_PAYLOAD="$BADGES_PAYLOAD$SEPARATOR$(olivaw test query ${{ env.OLIVAW_PARAMETERS }})"
          git add .acimov/output/query-test-actions.ttl .acimov/output/query-test-actions.md -f
        fi

        BADGES_PAYLOAD="$BADGES_PAYLOAD}}"
        echo "BADGES_PAYLOAD=$(echo $BADGES_PAYLOAD)" >> $GITHUB_ENV
        echo "Olivaw badges payload: $BADGES_PAYLOAD"

    - name: Check generated reports
      id: check-reports
      shell: bash
      run: |
        ANY_REPORTS=${{(env.RUN_ANY_TESTS == 'true') && (steps.run-test.conclusion == 'success') }}
        echo "ANY_REPORTS=$(echo $ANY_REPORTS)" >> $GITHUB_ENV
        echo "Any reports generated: $ANY_REPORTS"

    - name: Check archive option
      id: check-archive
      shell: bash
      run: |
        SHOULD_ARCHIVE=${{(env.ANY_REPORTS == 'true') && (inputs.archive-report == 'true') }}
        echo "SHOULD_ARCHIVE=$(echo $SHOULD_ARCHIVE)" >> $GITHUB_ENV
        echo "Should archive any report: $SHOULD_ARCHIVE"

    - name: Report publication planification
      id: publish-report
      shell: bash
      run: |
        SHOULD_COMMIT=${{(env.ANY_REPORTS == 'true') && (env.COMMIT_REPORTS == 'true')}}
        echo "SHOULD_COMMIT=$(echo $SHOULD_COMMIT)" >> $GITHUB_ENV
        echo "Should proceed to commit: $SHOULD_COMMIT"

        ARCHIVE_MODEL=${{(env.SHOULD_ARCHIVE  == 'true') && (inputs.model-test == 'true')}}
        echo "ARCHIVE_MODEL=$(echo $ARCHIVE_MODEL)" >> $GITHUB_ENV
        echo "Should archive model reports: $ARCHIVE_MODEL"

        ARCHIVE_DATA=${{(env.SHOULD_ARCHIVE  == 'true') && (inputs.data-test == 'true')}}
        echo "ARCHIVE_DATA=$(echo $ARCHIVE_DATA)" >> $GITHUB_ENV
        echo "Should archive data reports: $ARCHIVE_DATA"

        ARCHIVE_QUERY=${{(env.SHOULD_ARCHIVE  == 'true') && (inputs.query-test == 'true')}}
        echo "ARCHIVE_QUERY=$(echo $ARCHIVE_QUERY)" >> $GITHUB_ENV
        echo "Should archive query reports: $ARCHIVE_QUERY"

    - name: Add output files to repository
      id: commit-reports
      continue-on-error: true
      if: ${{ env.SHOULD_COMMIT == 'true' }}
      shell: bash
      run: |
        echo "Pushing ${{ github.repository }} test reports for branch ${{ env.BRANCH }}"

        git config --global user.email "no-reply@github.com"
        git config --global user.name "Olivaw in Actions"
        git commit -m "Provide automatic tests report [skip actions]"
        git remote set-url origin ${{ env.REPO_URI }}
        git push

        echo "Uploading ${{ github.repository }} badges values for branch ${{ env.BRANCH }} on gist ${{ env.GIST_ID }}"

        curl --request POST \
          --url 'https://api.github.com/gists/${{ env.GIST_ID }}?scope=gist' \
          --header 'Authorization: token ${{ inputs.gist-secret }}' \
          --header 'Content-Type: application/json' \
          --header 'X-GitHub-Api-Version: 2022-11-28' \
          --header 'User-Agent: olivaw/${{ env.OLIVAW_VERSION }}' \
          --data '${{ env.BADGES_PAYLOAD }}'

    - name: Archive model test results
      id: archive-model
      if: ${{ env.ARCHIVE_MODEL == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: model-test-report
        path: |
            .acimov/output/model-test-actions.md
            .acimov/output/model-test-actions.ttl

    - name: Archive data test results
      id: archive-data
      if: ${{ env.ARCHIVE_DATA == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: data-test-report
        path: |
          .acimov/output/data-test-actions.md
          .acimov/output/data-test-actions.ttl

    - name: Archive query test results
      id: archive-query
      if: ${{ env.ARCHIVE_QUERY == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: query-test-report
        path: |
          .acimov/output/query-test-actions.md
          .acimov/output/query-test-actions.ttl