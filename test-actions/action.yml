name: "Olivaw tests"
author: "Wimmics"
description: "Launches Olivaw test suite"
inputs:
  repository:
    description: "The url of the repository to test"
    type: string
    required: true
  ref:
    description: "The ref of the repository to test"
    type: string
    requird: true
  gist-secret:
    description: "The personal access token with only gist scope allowed"
    type: string
    required: true
  model-test:
    description: "Should the model tests be run"
    type: boolean
    required: true
  data-test:
    description: "Should the data tests be run"
    type: boolean
    required: true
  query-test:
    description: "Should the query tests be run"
    type: boolean
    required: true
  commit-report:
    description: "Should the report be committed on the repository"
    type: boolean
    required: false
    default: true
  archive-report:
    description: "Should the report be archived as a Github Artifact"
    type: boolean
    required: false
    default: true
  server-url:
    description: "The platform URL"
    type: string
    required: false
    default: "https://github.com"

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5 
      with:
        python-version: 'pypy3.9'

    - name: Get repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Install Olivaw test suite
      shell: bash
      run: pip install git+https://github.com/Wimmics/olivaw@test-actions-7

    - name: Generate model test report
      id: model-test
      if: ${{ inputs.model-test }}
      shell: bash
      run: |
        MODEL_SUMMARY="$(olivaw test model --mode=actions --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --BRANCH=${{ inputs.ref }})"
        MODEL_TOKENS=($MODEL_SUMMARY)

        echo "MODEL_PASS=$(echo ${MODEL_TOKENS[2]})" >> $GITHUB_ENV
        echo "MODEL_NOTTESTED=$(echo ${MODEL_TOKENS[5]})" >> $GITHUB_ENV
        echo "MODEL_CANNOTTELL=$(echo ${MODEL_TOKENS[8]})" >> $GITHUB_ENV
        echo "MODEL_MINORFAIL=$(echo ${MODEL_TOKENS[11]})" >> $GITHUB_ENV
        echo "MODEL_MAJORFAIL=$(echo ${MODEL_TOKENS[14]})" >> $GITHUB_ENV

        echo "EL_LABEL=$(echo ${MODEL_TOKENS[17]})" >> $GITHUB_ENV
        echo "EL_COLOR=$(echo ${MODEL_TOKENS[20]})" >> $GITHUB_ENV
        echo "QL_LABEL=$(echo ${MODEL_TOKENS[23]})" >> $GITHUB_ENV
        echo "QL_COLOR=$(echo ${MODEL_TOKENS[26]})" >> $GITHUB_ENV
        echo "RL_LABEL=$(echo ${MODEL_TOKENS[29]})" >> $GITHUB_ENV
        echo "RL_COLOR=$(echo ${MODEL_TOKENS[32]})" >> $GITHUB_ENV

        echo "GISTID=$(olivaw show gist --mode=actions --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --BRANCH=${{ inputs.ref }})" >> $GITHUB_ENV

        REF=${{ inputs.ref }}
        echo "github.ref: $REF"
        IFS='/' read -ra PATHS <<< "$REF"
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        echo $BRANCH_NAME
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
        echo "REPO=$(echo ${{ inputs.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV

        git add .acimov/output/model-test-actions.ttl .acimov/output/model-test-actions.md -f

    - name: Generate data test report
      shell: bash
      id: data-test
      if: ${{ inputs.data-test }}
      run: |
        DATA_SUMMARY="$(olivaw test data --mode=actions --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --BRANCH=${{ inputs.ref }})"
        DATA_TOKENS=($DATA_SUMMARY)

        echo "DATA_PASS=$(echo ${DATA_TOKENS[2]})" >> $GITHUB_ENV
        echo "DATA_NOTTESTED=$(echo ${DATA_TOKENS[5]})" >> $GITHUB_ENV
        echo "DATA_CANNOTTELL=$(echo ${DATA_TOKENS[8]})" >> $GITHUB_ENV
        echo "DATA_MINORFAIL=$(echo ${DATA_TOKENS[11]})" >> $GITHUB_ENV
        echo "DATA_MAJORFAIL=$(echo ${DATA_TOKENS[14]})" >> $GITHUB_ENV

        git add .acimov/output/data-test-actions.ttl .acimov/output/data-test-actions.md -f

    - name: Generate query test report
      shell: bash
      id: query-test
      if: ${{ inputs.query-test }}
      run: |
        QUERY_SUMMARY="$(olivaw test query --mode=actions --DEV_USERNAME=${{ github.actor }} --REPO_URI=${{ inputs.server-url }}/${{ inputs.repository }} --BRANCH=${{ inputs.ref }})"
        QUERY_TOKENS=($QUERY_SUMMARY)

        echo "QUERY_PASS=$(echo ${QUERY_TOKENS[2]})" >> $GITHUB_ENV
        echo "QUERY_NOTTESTED=$(echo ${QUERY_TOKENS[5]})" >> $GITHUB_ENV
        echo "QUERY_CANNOTTELL=$(echo ${QUERY_TOKENS[8]})" >> $GITHUB_ENV
        echo "QUERY_MINORFAIL=$(echo ${QUERY_TOKENS[11]})" >> $GITHUB_ENV
        echo "QUERY_MAJORFAIL=$(echo ${QUERY_TOKENS[14]})" >> $GITHUB_ENV

        git add .acimov/output/query-test-actions.ttl .acimov/output/query-test-actions.md -f

    - name: Add output files to repository
      id: commit
      continue-on-error: true
      if: ${{ (inputs.model-test || inputs.data-test || inputs.query-test) && inputs.commit-report }}
      shell: bash
      run: |
        git config --global user.email "no-reply@github.com"
        git config --global user.name "Olivaw in Actions"
        git pull
        git commit -m "Provide automatic tests report [skip actions]"
        git remote set-url origin ${{ inputs.server-url }}/${{ inputs.repository }}
        git push

    - name: Archive model test results
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' && inputs.archive-report }}
      uses: actions/upload-artifact@v3
      with:
        name: model-test-report
        path: .acimov/output/model-test-actions.md

    - name: Archive data test results
      if: ${{ inputs.data-test && steps.data-test.conclusion == 'success' && inputs.archive-report }}
      uses: actions/upload-artifact@v3
      with:
        name: data-test-report
        path: .acimov/output/data-test-actions.md

    - name: Archive query test results
      if: ${{ inputs.query-test && steps.query-test.conclusion == 'success' && inputs.archive-report }}
      uses: actions/upload-artifact@v3
      with:
        name: query-test-report
        path: .acimov/output/query-test-actions.md

    - name: Create the Pass Model Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_PASS.json
        label: Pass
        message: ${{ env.MODEL_PASS }}
        color: green

    - name: Create the NotTested Model Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_NOTTESTED.json
        label: NotTested
        message: ${{ env.MODEL_NOTTESTED }}
        color: White

    - name: Create the CannotTell Model Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.MODEL_CANNOTTELL }}
        color: yellow

    - name: Create the MinorFail Model Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_MINORFAIL.json
        label: MinorFail
        message: ${{ env.MODEL_MINORFAIL }}
        color: orange

    - name: Create the MajorFail Model Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_MAJORFAIL.json
        label: MajorFail
        message: ${{ env.MODEL_MAJORFAIL }}
        color: red

    - name: Create the OWL_EL Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_EL.json
        label: OWL EL
        message: ${{ env.EL_LABEL }}
        color: ${{ env.EL_COLOR }}

    - name: Create the OWL_QL Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QL.json
        label: OWL QL
        message: ${{ env.QL_LABEL }}
        color: ${{ env.QL_COLOR }}

    - name: Create the OWL_RL Badge
      if: ${{ inputs.model-test && steps.model-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_RL.json
        label: OWL RL
        message: ${{ env.RL_LABEL }}
        color: ${{ env.RL_COLOR }}

    - name: Create the Pass Data badge
      if: ${{ inputs.data-test && steps.data-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_PASS.json
        label: Pass
        message: ${{ env.DATA_PASS }}
        color: green

    - name: Create the NotTested Data Badge
      if: ${{ inputs.data-test && steps.data-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_NOTTESTED.json
        label: NotTested
        message: ${{ env.DATA_NOTTESTED }}
        color: White

    - name: Create the CannotTell Data Badge
      if: ${{ inputs.data-test && steps.data-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.DATA_CANNOTTELL }}
        color: yellow

    - name: Create the MinorFail Data Badge
      if: ${{ inputs.data-test && steps.data-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_MINORFAIL.json
        label: MinorFail
        message: ${{ env.DATA_MINORFAIL }}
        color: orange

    - name: Create the MajorFail Data Badge
      if: ${{ inputs.data-test && steps.data-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_MAJORFAIL.json
        label: MajorFail
        message: ${{ env.DATA_MAJORFAIL }}
        color: red

    - name: Create the Pass Query badge
      if: ${{ inputs.query-test && steps.query-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_PASS.json
        label: Pass
        message: ${{ env.QUERY_PASS }}
        color: green

    - name: Create the NotTested Query Badge
      if: ${{ inputs.query-test && steps.query-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_NOTTESTED.json
        label: NotTested
        message: ${{ env.QUERY_NOTTESTED }}
        color: White

    - name: Create the CannotTell Query Badge
      if: ${{ inputs.query-test && steps.query-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.QUERY_CANNOTTELL }}
        color: yellow

    - name: Create the MinorFail Query Badge
      if: ${{ inputs.query-test && steps.query-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_MINORFAIL.json
        label: MinorFail
        message: ${{ env.QUERY_MINORFAIL }}
        color: orange

    - name: Create the MajorFail Query Badge
      if: ${{ inputs.query-test && steps.query-test.conclusion == 'success' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_MAJORFAIL.json
        label: MajorFail
        message: ${{ env.QUERY_MAJORFAIL }}
        color: red