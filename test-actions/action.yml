name: "Olivaw tests"
author: "Wimmics"
description: "Launches Olivaw test suite"
inputs:
  repository:
    description: "The url of the repository to test"
    type: string
    required: true
  ref:
    description: "The ref of the repository to test"
    type: string
    required: true
  gist-secret:
    description: "The personal access token with only gist scope allowed"
    type: string
    required: true
  model-test:
    description: "Should the model tests be run"
    type: boolean
    required: false
    default: true
  data-test:
    description: "Should the data tests be run"
    type: boolean
    required: false
    default: true
  query-test:
    description: "Should the query tests be run"
    type: boolean
    required: false
    default: true
  commit-report:
    description: "Should the report be committed on the repository"
    type: boolean
    required: false
    default: true
  archive-report:
    description: "Should the report be archived as a Github Artifact"
    type: boolean
    required: false
    default: true
  server-url:
    description: "The platform URL"
    type: string
    required: false
    default: "https://github.com"

runs:
  using: "composite"
  steps:
    - name: Install python environment
      id: setup-python
      uses: actions/setup-python@v5 
      with:
        python-version: 'pypy3.10'

    - name: Get repository
      id: checkout-repo
      uses: actions/checkout@v4
      with:
        github-server-url: ${{ github.server_url }}
        repository: ${{ github.repository }}
        ref: ${{ github.sha }}

    - name: Get olivaw actions version
      id: actions-version
      shell: bash
      run: |
        ACTIONS_PATH=${{ github. action_path }}
        IFS='/' read -ra ACTIONS_PATH_PARTS <<< "$ACTIONS_PATH"
        OLIVAW_HASH="${ACTIONS_PATH_PARTS[7]}"
        echo "OLIVAW_HASH=$(echo $OLIVAW_HASH)" >> $GITHUB_ENV
        echo "Olivaw hash: $OLIVAW_HASH"

    - name: Compute which actions steps to perform
      id: plan-actions
      shell: bash
      run: |
        INITIALIZED=${{ hashFiles('.acimov/parameters.json') != '' }}
        echo "INITIALIZED=$(echo $INITIALIZED)" >> $GITHUB_ENV
        echo "Is repository initialized: $INITIALIZED"

        RUN_MODEL_TESTS=${{ (inputs.model-test == 'true') && (env.INITIALIZED == 'true') }}
        echo "RUN_MODEL_TESTS=$(echo $RUN_MODEL_TESTS)" >> $GITHUB_ENV
        echo "Run model tests: $RUN_MODEL_TESTS"

        RUN_DATA_TESTS=${{ (inputs.data-test == 'true') && (env.INITIALIZED == 'true') }}
        echo "RUN_DATA_TESTS=$(echo $RUN_DATA_TESTS)" >> $GITHUB_ENV
        echo "Run data tests: $RUN_DATA_TESTS"

        RUN_QUERY_TESTS=${{ (inputs.query-test == 'true') && (env.INITIALIZED == 'true') }}
        echo "RUN_QUERY_TESTS=$(echo $RUN_QUERY_TESTS)" >> $GITHUB_ENV
        echo "Run query tests: $RUN_QUERY_TESTS"

        RUN_ANY_TESTS=${{ (env.RUN_MODEL_TESTS == 'true') || (env.RUN_DATA_TESTS == 'true') || (env.RUN_QUERY_TESTS == 'true') }}
        echo "RUN_ANY_TESTS=$(echo $RUN_ANY_TESTS)" >> $GITHUB_ENV
        echo "Run any tests: $RUN_ANY_TESTS"

        COMMIT_REPORTS=${{ (env.RUN_ANY_TESTS == 'true') && (inputs.commit-report == 'true') }}
        echo "COMMIT_REPORTS=$(echo $COMMIT_REPORTS)" >> $GITHUB_ENV

    - name: Get olivaw actions version
      id: actions-version
      shell: bash
      run: |
        ACTIONS_REF=${{ github.action_ref || github.ref_name }}
        echo "ACTIONS_REF=$(echo $ACTIONS_REF)" >> $GITHUB_ENV
        echo "Olivaw actions ref: $ACTIONS_REF"

    - name: Install Olivaw test suite
      id: install-olivaw
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: pip install git+https://github.com/Wimmics/olivaw.git@${{ env.ACTIONS_REF }}

    - name: Compute olivaw command line parameters
      id: olivaw-parameters
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: |
        DEV_USERNAME=${{ github.actor }}
        echo "DEV_USERNAME=$(echo $DEV_USERNAME)" >> $GITHUB_ENV
        echo "Dev username: $DEV_USERNAME"

        SERVER_URL=${{ github.server_url }}
        REPO=${{ github.repository }}
        REPO_URI="$SERVER_URL/$REPO"
        echo "REPO_URI=$(echo $REPO_URI)" >> $GITHUB_ENV
        echo "Repository URI: $REPO_URI"

        REF=${{ github.ref }}
        IFS='/' read -ra REF_PARTS <<< "$REF"
        BRANCH="${REF_PARTS[2]}"
        echo "BRANCH=$(echo $BRANCH)" >> $GITHUB_ENV
        echo "Repository branch: $BRANCH"

        COMMIT_HASH="$(git rev-parse origin/$BRANCH)"
        echo "COMMIT_HASH=$(echo $COMMIT_HASH)" >> $GITHUB_ENV
        echo "Commit hash: $COMMIT_HASH"

        COMMIT_DATE="$(git log -1 --format=%cd --date=format:%Y-%m-%dT%H:%M:%S $COMMIT_HASH)"
        echo "COMMIT_DATE=$(echo $COMMIT_DATE)" >> $GITHUB_ENV
        echo "Commit date: $COMMIT_DATE"

        OLIVAW_PARAMETERS="--MODE==ACTIONS --DEV_USERNAME=$DEV_USERNAME --REPO_URI=$REPO_URI --BRANCH=$BRANCH --COMMIT_HASH=$COMMIT_HASH --COMMIT_DATE=$COMMIT_DATE"
        echo "OLIVAW_PARAMETERS=$(echo $OLIVAW_PARAMETERS)" >> $GITHUB_ENV
        echo "Olivaw Actions parameters: $OLIVAW_PARAMETERS"

    - name: Retrieve current repository GIST parameter
      id: repo-gist
      if: ${{ env.INITIALIZED == 'true' }}
      shell: bash
      run: |
        echo "GISTID=$(olivaw show gist ${{ env.OLIVAW_PARAMETERS }})" >> $GITHUB_ENV

    - name: Generate model test report
      id: model-test
      if: ${{ env.RUN_MODEL_TESTS == 'true' }}
      shell: bash
      run: |
        MODEL_SUMMARY="$(olivaw test model ${{ env.OLIVAW_PARAMETERS }})"
        MODEL_TOKENS=($MODEL_SUMMARY)

        echo "MODEL_PASS=$(echo ${MODEL_TOKENS[2]})" >> $GITHUB_ENV
        echo "MODEL_NOTTESTED=$(echo ${MODEL_TOKENS[5]})" >> $GITHUB_ENV
        echo "MODEL_CANNOTTELL=$(echo ${MODEL_TOKENS[8]})" >> $GITHUB_ENV
        echo "MODEL_MINORFAIL=$(echo ${MODEL_TOKENS[11]})" >> $GITHUB_ENV
        echo "MODEL_MAJORFAIL=$(echo ${MODEL_TOKENS[14]})" >> $GITHUB_ENV

        echo "EL_LABEL=$(echo ${MODEL_TOKENS[17]})" >> $GITHUB_ENV
        echo "EL_COLOR=$(echo ${MODEL_TOKENS[20]})" >> $GITHUB_ENV
        echo "QL_LABEL=$(echo ${MODEL_TOKENS[23]})" >> $GITHUB_ENV
        echo "QL_COLOR=$(echo ${MODEL_TOKENS[26]})" >> $GITHUB_ENV
        echo "RL_LABEL=$(echo ${MODEL_TOKENS[29]})" >> $GITHUB_ENV
        echo "RL_COLOR=$(echo ${MODEL_TOKENS[32]})" >> $GITHUB_ENV

        git add .acimov/output/model-test-actions.ttl .acimov/output/model-test-actions.md -f

    - name: Generate data test report
      id: data-test
      if: ${{ env.RUN_DATA_TESTS == 'true' }}
      shell: bash
      run: |
        DATA_SUMMARY="$(olivaw test data ${{ env.OLIVAW_PARAMETERS }})"
        DATA_TOKENS=($DATA_SUMMARY)

        echo "DATA_PASS=$(echo ${DATA_TOKENS[2]})" >> $GITHUB_ENV
        echo "DATA_NOTTESTED=$(echo ${DATA_TOKENS[5]})" >> $GITHUB_ENV
        echo "DATA_CANNOTTELL=$(echo ${DATA_TOKENS[8]})" >> $GITHUB_ENV
        echo "DATA_MINORFAIL=$(echo ${DATA_TOKENS[11]})" >> $GITHUB_ENV
        echo "DATA_MAJORFAIL=$(echo ${DATA_TOKENS[14]})" >> $GITHUB_ENV

        git add .acimov/output/data-test-actions.ttl .acimov/output/data-test-actions.md -f

    - name: Generate query test report
      id: query-test
      if: ${{ env.RUN_QUERY_TESTS == 'true' }}
      shell: bash
      run: |
        QUERY_SUMMARY="$(olivaw test query ${{ env.OLIVAW_PARAMETERS }})"
        QUERY_TOKENS=($QUERY_SUMMARY)

        echo "QUERY_PASS=$(echo ${QUERY_TOKENS[2]})" >> $GITHUB_ENV
        echo "QUERY_NOTTESTED=$(echo ${QUERY_TOKENS[5]})" >> $GITHUB_ENV
        echo "QUERY_CANNOTTELL=$(echo ${QUERY_TOKENS[8]})" >> $GITHUB_ENV
        echo "QUERY_MINORFAIL=$(echo ${QUERY_TOKENS[11]})" >> $GITHUB_ENV
        echo "QUERY_MAJORFAIL=$(echo ${QUERY_TOKENS[14]})" >> $GITHUB_ENV

        git add .acimov/output/query-test-actions.ttl .acimov/output/query-test-actions.md -f

    - name: Check files to commit and/or archive
      id: check-reports
      shell: bash
      run: |
        MODEL_REPORTS=${{(env.RUN_MODEL_TESTS == 'true') && (steps.model-test.conclusion == 'success') }}
        echo "MODEL_REPORTS=$(echo $MODEL_REPORTS)" >> $GITHUB_ENV
        echo "Model reports generated: $MODEL_REPORTS"

        DATA_REPORTS=${{(env.RUN_DATA_TESTS == 'true') && (steps.data-test.conclusion == 'success') }}
        echo "DATA_REPORTS=$(echo $DATA_REPORTS)" >> $GITHUB_ENV
        echo "Data reports generated: $DATA_REPORTS"

        QUERY_REPORTS=${{(env.QUERY_REPORTS == 'true') && (steps.query-test.conclusion == 'success') }}
        echo "QUERY_REPORTS=$(echo $QUERY_REPORTS)" >> $GITHUB_ENV
        echo "Query reports generated: $QUERY_REPORTS"

        ANY_REPORTS=${{(env.MODEL_REPORTS == 'true') || (env.DATA_REPORTS == 'true') || (env.QUERY_REPORTS == 'true')}}
        echo "ANY_REPORTS=$(echo $ANY_REPORTS)" >> $GITHUB_ENV
        echo "Any reports generated: $ANY_REPORTS"

        SHOULD_COMMIT=${{(env.ANY_REPORTS == 'true') && (env.COMMIT_REPORTS == 'true')}}
        echo "SHOULD_COMMIT=$(echo $SHOULD_COMMIT)" >> $GITHUB_ENV
        echo "Should proceed to commit: $SHOULD_COMMIT"

        ARCHIVE_MODEL=${{(env.MODEL_REPORTS  == 'true') && (inputs.archive-report == 'true')}}
        echo "ARCHIVE_MODEL=$(echo $ARCHIVE_MODEL)" >> $GITHUB_ENV
        echo "Should archive model reports: $ARCHIVE_MODEL"

        ARCHIVE_DATA=${{(env.DATA_REPORTS  == 'true') && (inputs.archive-report == 'true')}}
        echo "ARCHIVE_DATA=$(echo $ARCHIVE_DATA)" >> $GITHUB_ENV
        echo "Should archive data reports: $ARCHIVE_DATA"

        ARCHIVE_QUERY=${{(env.QUERY_REPORTS  == 'true') && (inputs.archive-report == 'true')}}
        echo "ARCHIVE_QUERY=$(echo $ARCHIVE_QUERY)" >> $GITHUB_ENV
        echo "Should archive query reports: $ARCHIVE_QUERY"

    - name: Add output files to repository
      id: commit-reports
      continue-on-error: true
      if: ${{ env.SHOULD_COMMIT == 'true' }}
      shell: bash
      run: |
        git config --global user.email "no-reply@github.com"
        git config --global user.name "Olivaw in Actions"
        git pull
        git commit -m "Provide automatic tests report [skip actions]"
        git remote set-url origin ${{ env.REPO_URI }}
        git push

    - name: Archive model test results
      id: archive-model
      if: ${{ env.ARCHIVE_MODEL == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: model-test-report
        path: |
            .acimov/output/model-test-actions.md
            .acimov/output/model-test-actions.ttl

    - name: Archive data test results
      id: archive-data
      if: ${{ env.ARCHIVE_DATA == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: data-test-report
        path: |
          .acimov/output/data-test-actions.md
          .acimov/output/data-test-actions.ttl

    - name: Archive query test results
      id: archive-query
      if: ${{ env.ARCHIVE_QUERY == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: query-test-report
        path: |
          .acimov/output/query-test-actions.md
          .acimov/output/query-test-actions.ttl

    - name: Create the Pass Model Badge
      id: model-pass
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_PASS.json
        label: Pass
        message: ${{ env.MODEL_PASS }}
        color: green

    - name: Create the NotTested Model Badge
      id: model-nottested
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_NOTTESTED.json
        label: NotTested
        message: ${{ env.MODEL_NOTTESTED }}
        color: White

    - name: Create the CannotTell Model Badge
      id: model-cannottell
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.MODEL_CANNOTTELL }}
        color: yellow

    - name: Create the MinorFail Model Badge
      id: model-minorfail
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_MINORFAIL.json
        label: MinorFail
        message: ${{ env.MODEL_MINORFAIL }}
        color: orange

    - name: Create the MajorFail Model Badge
      id: model-majorfail
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_MODEL_MAJORFAIL.json
        label: MajorFail
        message: ${{ env.MODEL_MAJORFAIL }}
        color: red

    - name: Create the OWL_EL Badge
      id: profile-el
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_EL.json
        label: OWL EL
        message: ${{ env.EL_LABEL }}
        color: ${{ env.EL_COLOR }}

    - name: Create the OWL_QL Badge
      id: profile-ql
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QL.json
        label: OWL QL
        message: ${{ env.QL_LABEL }}
        color: ${{ env.QL_COLOR }}

    - name: Create the OWL_RL Badge
      id: profile-rl
      if: ${{ env.MODEL_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_RL.json
        label: OWL RL
        message: ${{ env.RL_LABEL }}
        color: ${{ env.RL_COLOR }}

    - name: Create the Pass Data badge
      id: data-pass
      if: ${{ env.DATA_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_PASS.json
        label: Pass
        message: ${{ env.DATA_PASS }}
        color: green

    - name: Create the NotTested Data Badge
      id: data-nottested
      if: ${{ env.DATA_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_NOTTESTED.json
        label: NotTested
        message: ${{ env.DATA_NOTTESTED }}
        color: White

    - name: Create the CannotTell Data Badge
      id: data-cannottell
      if: ${{ env.DATA_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.DATA_CANNOTTELL }}
        color: yellow

    - name: Create the MinorFail Data Badge
      id: data-minorfail
      if: ${{ env.DATA_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_MINORFAIL.json
        label: MinorFail
        message: ${{ env.DATA_MINORFAIL }}
        color: orange

    - name: Create the MajorFail Data Badge
      id: data-majorfail
      if: ${{ env.DATA_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_DATA_MAJORFAIL.json
        label: MajorFail
        message: ${{ env.DATA_MAJORFAIL }}
        color: red

    - name: Create the Pass Query badge
      id: query-pass
      if: ${{ env.QUERY_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_PASS.json
        label: Pass
        message: ${{ env.QUERY_PASS }}
        color: green

    - name: Create the NotTested Query Badge
      id: query-nottested
      if: ${{ env.QUERY_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_NOTTESTED.json
        label: NotTested
        message: ${{ env.QUERY_NOTTESTED }}
        color: White

    - name: Create the CannotTell Query Badge
      id: query-cannottell
      if: ${{ env.QUERY_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_CANNOTTELL.json
        label: CannotTell
        message: ${{ env.QUERY_CANNOTTELL }}
        color: yellow

    - name: Create the MinorFail Query Badge
      id: query-minorfail
      if: ${{ env.QUERY_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_MINORFAIL.json
        label: MinorFail
        message: ${{ env.QUERY_MINORFAIL }}
        color: orange

    - name: Create the MajorFail Query Badge
      id: query-majorfail
      if: ${{ env.QUERY_REPORTS == 'true' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ inputs.gist-secret }}
        gistID: ${{ env.GISTID }}
        filename: ${{ env.BRANCH }}_QUERY_MAJORFAIL.json
        label: MajorFail
        message: ${{ env.QUERY_MAJORFAIL }}
        color: red